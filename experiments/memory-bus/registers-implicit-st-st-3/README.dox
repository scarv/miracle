/*!

@defgroup experiments-memory-registers-implicit-st-st-3 Implicit Store/Store 3
@ingroup  experiments-memory
@brief Is there implicit leakage on a store-after-store?

@see @ref experiments-memory-registers-implicit-st-ld
@see @ref experiments-memory-registers-implicit-ld-st
@see @ref experiments-memory-registers-implicit-ld-ld
@see @ref experiments-memory-registers-implicit-st-st-1
@see @ref experiments-memory-registers-implicit-st-st-2

This acts as an analogue to the
@ref experiments-memory-registers-implicit-ld-ld
experiment, but does a sequence of two stores, rather than two loads.

It also acts as an analogue to the
@ref experiments-memory-registers-implicit-st-st-1
experiment.
This experiment stores the TTest variables from CPU registers to memory,
overwriting zeros in the memory.
The other experiment stores zeros, overwriting the TTest variables in
memory.

## Purpose:

To discover if, when overwriting memory locations, the old data is
implicitly loaded into a micro-architectural register.

This has implications for things like leakage aware stack-erasure.

## Method:


## Expectations:

- If store instructions implicitly load the *old* data at the address
  they are storing to into a micro-architectural registers, then
  we should see hamming distance leakage between consecutivley over-written
  values, even if we are over-writing the memory locations with zeros.

## Running the experiment

To run all stages of the experiment for a particular target device:

```
make -B USB_PORT=[PORT] UAS_TARGET=[TARGET] flow-memory-bus-registers-implicit-st-st-3
```

Where:
- `[PORT]` Is the UART/Serial port to communicate with it over.
- `[TARGET]` Is one of the target names listed in @ref targets

This will run all of the build, program, capture and analyse steps for
the experiment on the specified target.

The individual steps of the experiment are run with the following commands:

- Build: `make build_[TARGET]_memory-bus-registers-implicit-st-st-3`
- Program: `make program_[TARGET]_memory-bus-registers-implicit-st-st-3`
- Capture: `make capture_[TARGET]_memory-bus-registers-implicit-st-st-3 USB_PORT=[PORT]`
- Analyse: `make analyse_[TARGET]_memory-bus-registers-implicit-st-st-3`

*/
